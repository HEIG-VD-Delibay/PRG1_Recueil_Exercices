skill Elements de base
exo [srg] Priorité des opérateurs
Ajouter toutes les parenthèses aux expressions suivantes pour exprimer
explicitement l'ordre d'évaluation de l'expression qui existe implicitement
en vertu de l'ordre de priorité des opérateurs. 

TODO: okay ce changement de format ?

Par exemple, l'expression `a + b * c` doit être ré-écrite `(a + (b * c))` puisque la multiplication est prioritaire sur l'addition.  
De même, l'expression `a / b * c` doit être ré-écrite `((a / b) * c)`.

Les opérateurs `/` et `*` de même priorité étant évalués de gauche à droite. Vous pouvez vous aider de la page [C++ Operator Precedence](https://en.cppreference.com/w/cpp/language/operator_precedence) de cppreference.com

subexo [ehk]
~~~cpp 
1 * 2 + 3 / 4 * 2
~~~
sol ((1 * 2) + ((3 / 4) * 2))
TODO: add a way to prefill "1 * 2 + 3 / 4 * 2" in the input, so students don't need to copy paste or rewrite it ?

TODO: add variants, or a regex or space remove filter ?? for all solutions here.

subexo [gkz]
~~~cpp 
a + b < c * d + e or f - g + h == i
~~~
sol (((a + b) < ((c * d) + e)) or (((f - g) + h) == i))

subexo [vii]
~~~cpp 
a == b < c
~~~
sol (a == (b < c))

subexo [spt]
~~~cpp 
a < b or c == d and e > b
~~~
sol ((a < b) or ((c == d) and (e > b)))

subexo [ckm]
~~~cpp 
++++a; 
~~~
sol (++(++a)) 

subexo [xvh]
~~~cpp 
+ a - - b * - c + - + d
~~~
sol (((+a) - ((-b) * (-c))) + (-(+d)))

subexo [xom]
~~~cpp 
a * b % c + d % e / f - g
~~~
sol ((((a * b) % c) + ((d % e) / f)) - g)

subexo [pjs]
~~~cpp 
+ a - b or c == d > e < f and g
~~~
sol (((+ a) - b) or ((c == ((d > e) < f)) and g))
