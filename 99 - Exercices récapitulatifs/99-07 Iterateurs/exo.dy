exo Itérateurs
On veut écrire une fonction générique `concat` qui concatène plusieurs plages
d'éléments contenus dans un ou plusieurs `vector` et écrit le résultat dans
une autre plage, ainsi qu'une fonction d'aide `total_size` qui permet de
calculer le nombre d'éléments concaténés à priori, i.e. sans effectuer la
concaténation.

Soient les déclarations ci-dessous
```cpp
template <typename T> using Iterateur = typename vector<T>::const_iterator;
template <typename T> using Plage     = pair<Iterateur<T>, Iterateur<T>>;
template <typename T> using vPlages   = vector<Plage<T>>;

const vector<int> v1 {11, 12, 13, 14, 15, 16};
const vector<int> v2 {21, 22, 23, 24};
      vector<int> v3 {31, 32};

const vPlages<int> plages {{v1.cbegin() + 3, v1.cend()},        // v1 => 14, 15, 16
                           {v1.cbegin(),     v1.cend() - 3},    // v1 => 11, 12, 13
                           {v2.cbegin(),     v2.cend()},        // v2 => 21, 22, 23, 24
                           {v3.cbegin(),     v3.cend()}};       // v3 => 31, 32

total_size(plages.begin(), plages.end());                       // => 12
concat(plages.cbegin(), plages.cend(), v4.begin());            // 14, 15, 16, 11, 12, 13, 21, 22, 23, 24, 31, 32
```

Ecrire les **deux fonctions génériques**

- `total_size(..)`
    - Prend en paramètre deux itérateurs `[first, last)` sur un `vPlages<T>`.
    - Retourne un `size_t` correspondant à la somme des tailles des plages.
- `concat(..)`
    - Prend en paramètre deux itérateurs `[first, last)` sur un `vPlages<T>`<br> et un itérateur `result` à la position initiale d'écriture.
    - Retourne un itérateur sur l'élément qui suit immédiatement la dernière écriture.

check Output correct
see
[11, 12, 13, 14, 15, 16]
[21, 22, 23, 24]
[31, 32]

total_size : 12

[14, 15, 16, 11, 12, 13, 21, 22, 23, 24, 31, 32]
[31, 32, 21, 22, 23, 24, 11, 12, 13, 14, 15, 16]
